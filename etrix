#!/usr/bin/env python3
from math import sin, radians, tan
import argparse


def prett_print_inches(inches):

    s = str(inches).split('.')
    dec = ''
    
    try:
        dec = s[1]
    except:
        return 'NaN'

    cor = float('0.' + dec)
    
    if cor < 0.0625:
        return s[0]

    frac = ''
    
    frac = '⅞' if cor < 0.9375 else ''
    frac = '¾' if cor < 0.8125 else frac
    frac = '⅝' if cor < 0.6875 else frac
    frac = '½' if cor < 0.5625 else frac
    frac = '⅜' if cor < 0.4375 else frac
    frac = '¼' if cor < 0.3125 else frac
    frac = '⅛' if cor < 0.1875 else frac
    
    if frac == '':
        return str(int(s[0]) + 1)

    return s[0] + frac

# print the marks for conduits
def gen_concentric_offsets(dist_list, first_os, c, angle, first_mark, diverge):

	# get trig values
	tantheta = tan(radians(angle))
	sintheta = sin(radians(angle))
	
	
	# get offset size
	os_sizes = []
	for i in range(len(dist_list)):
	    if diverge:
	        os_sizes.append(float(first_os - (i * c) + (dist_list[i] - dist_list[0])))
	    else:
		    os_sizes.append(float(first_os + (i * c) - (dist_list[i] - dist_list[0])))

	# get distance b/w marks
	marks_dist = []	
	for i in os_sizes:
		marks_dist.append(i * (1/sintheta))

	# get f values for each item in dist_list and store in a list
	# f is defined as dist/tan(angle) - c/sin(angle) for converging offsets, 
	# and c/sin(angle) - dist/tan(angle) for diverging
	# where dist =  dist_list[i] - dist_list[i-1]
	f_vals = [first_mark]
	for i in range(1, len(dist_list)):
		d = dist_list[i] - dist_list[i-1]

		if diverge:
		    f = (c/sintheta) - (d/tantheta)
		else:
		    f = (d / tantheta) - (c / sintheta)

		f_vals.append(f+f_vals[i-1])

	adjusted_starting_value = first_mark - min(f_vals)
	for i in range(len(f_vals)):
		f_vals[i] = f_vals[i] + adjusted_starting_value
		
    # return this as a reasonable list of values and have a printing method handle it
	marks_list = []
	for i in range(len(dist_list)):
	    local_list = []
	    local_list.append(prett_print_inches(f_vals[i]))
	    local_list.append(prett_print_inches(f_vals[i] + marks_dist[i]))
	    local_list.append(prett_print_inches(os_sizes[i]))
	    local_list.append(prett_print_inches(marks_dist[i]))
	    marks_list.append(local_list)

	return marks_list


def result_print(marks_list, quiet = False):
    if quiet:
        for i in marks_list:
            print(i[0])
            print(i[1])
            print('')
    else:
        for i in marks_list:
            print("First mark:",i[0])
            print("Second mark:",i[1])
            print("Offset size:",i[2])
            print("Distance between marks:",i[3],'\n')
            
def main():
	# get values from argparse
	parser = argparse.ArgumentParser()
	
	
	parser.add_argument("-d", "--distances", nargs="+", required=True,
						help="<Required> list of the distances from the first conduit, starting with 0, in inches", type=float)

	parser.add_argument("-o", "--offset", required=True,
						help="<Required> distance of the first offset in inches", type=float)

	parser.add_argument("-a", "--angle", default=45.0,
						help="angle of the bend in degrees (default = 45)", type=float)

	parser.add_argument("-n", "--normalized", default=2.0,
						help="normalized centre-to-centre distance between conduits in inches (default = 2)", type=float)

	parser.add_argument("-f", "--first_mark", default=6.0,
						help="position of the smallest first mark in inches (default = 6.0)", type=float)

	parser.add_argument("-q", "--quiet", 
						help="set this flag to print with less info", action="store_true")

	parser.add_argument("-D", "--diverge", 
							help="use when only smallest offset is known", action="store_true")

	args = parser.parse_args()

	result_print(gen_concentric_offsets(args.distances, args.offset, args.normalized, 
	            args.angle, args.first_mark, args.diverge), args.quiet)

main()
